# auto-generated by grc.converter

id: spp_create_packet
label: create_packet
category: '[spp]'

parameters:
-   id: apid
    label: APID
    dtype: int
-   id: packetType
    label: Packet Type
    dtype: int
-   id: encrypt
    label: Encryption Mode
    dtype: int
-   id: enckey
    label: Encryption Key
    dtype: string

inputs:
-   domain: message
    id: in

outputs:
-   domain: message
    id: out

templates:
    imports: exec(open("/home/spacecraft/cygnus/gnuradio/gr-spp/python/create_packet.py").read())
    make: create_packet(${apid}, ${packetType}, ${encrypt}, ${enckey})

documentation: |-
    This Block is designed to create a packet according to the Space Packet Protocol (SPP).
            Input: This should be of message format and contain the data that will become the payload of the packet.
            Output: This is of message format which will contain a single constructed SPP packet.
          The Packets are organized as such:
            Header: This is the first 6 bytes of the packet.
              The break down is as follows:
                    header0 contains bits 0-15 of the packet which include:
                      packet Version Number(3 bits)
                      packet Type(1 bit)
                      second Header Flag(1 bit)
                      Aip Process ID(APID)(11 bits)
                    header1 contains bits 16-31 of the packet which include:
                      Sequence Flags(2 bits)
                      Packet Sequence Count(14 bits)
                    header2 contains bits 32-45 of the packet which include:
                      Packet Data Length(16 bits)
            Payload: This is the data that was passed into the create_packet block.
              The maximum size for this data in a single packet will be 1024kB

file_format: 1
